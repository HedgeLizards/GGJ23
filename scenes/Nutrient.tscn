[gd_scene load_steps=10 format=2]

[ext_resource path="res://assets/nitro_glow.png" type="Texture" id=1]
[ext_resource path="res://scripts/nutrient.gd" type="Script" id=2]
[ext_resource path="res://assets/nitro_pickup.png" type="Texture" id=3]

[sub_resource type="CircleShape2D" id=1]
radius = 17.0

[sub_resource type="Shader" id=3]
code = "// HSV to RBG from https://www.rapidtables.com/convert/color/hsv-to-rgb.html
// Rotation matrix from https://en.wikipedia.org/wiki/Rotation_matrix

shader_type canvas_item;

const float PI = 3.1415926535;

uniform float strength: hint_range(0., 1.) = 0.5;
uniform float speed: hint_range(0., 10.) = 0.5;
uniform float angle: hint_range(0., 360.) = 0.;

void fragment() {
	float hue = UV.x * cos(radians(angle)) - UV.y * sin(radians(angle));
	hue = fract(hue + fract(TIME  * speed));
	float x = 1. - abs(mod(hue / (1./ 6.), 2.) - 1.);
	vec3 rainbow;
	if(hue < 1./6.){
		rainbow = vec3(1., x, 0.);
	} else if (hue < 1./3.) {
		rainbow = vec3(x, 1., 0);
	} else if (hue < 0.5) {
		rainbow = vec3(0, 1., x);
	} else if (hue < 2./3.) {
		rainbow = vec3(0., x, 1.);
	} else if (hue < 5./6.) {
		rainbow = vec3(x, 0., 1.);
	} else {
		rainbow = vec3(1., 0., x);
	}
	vec4 color = texture(TEXTURE, UV);
	COLOR = mix(color, vec4(rainbow, color.a), strength);
}"

[sub_resource type="ShaderMaterial" id=4]
shader = SubResource( 3 )
shader_param/strength = 0.5
shader_param/speed = 0.5
shader_param/angle = 100.0

[sub_resource type="Gradient" id=2]
offsets = PoolRealArray( 0, 0.5, 1 )
colors = PoolColorArray( 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0 )

[sub_resource type="Shader" id=5]
code = "// HSV to RBG from https://www.rapidtables.com/convert/color/hsv-to-rgb.html
// Rotation matrix from https://en.wikipedia.org/wiki/Rotation_matrix

shader_type canvas_item;

const float PI = 3.1415926535;

uniform float strength: hint_range(0., 1.) = 0.5;
uniform float speed: hint_range(0., 10.) = 0.5;
uniform float angle: hint_range(0., 360.) = 0.;

void fragment() {
	float hue = UV.x * cos(radians(angle)) - UV.y * sin(radians(angle));
	hue = fract(hue + fract(TIME  * speed));
	float x = 1. - abs(mod(hue / (1./ 6.), 2.) - 1.);
	vec3 rainbow;
	if(hue < 1./6.){
		rainbow = vec3(1., x, 0.);
	} else if (hue < 1./3.) {
		rainbow = vec3(x, 1., 0);
	} else if (hue < 0.5) {
		rainbow = vec3(0, 1., x);
	} else if (hue < 2./3.) {
		rainbow = vec3(0., x, 1.);
	} else if (hue < 5./6.) {
		rainbow = vec3(x, 0., 1.);
	} else {
		rainbow = vec3(1., 0., x);
	}
	vec4 color = texture(TEXTURE, UV);
	COLOR = mix(color, vec4(rainbow, color.a), strength);
}"

[sub_resource type="ShaderMaterial" id=6]
shader = SubResource( 5 )
shader_param/strength = 0.866
shader_param/speed = 1.639
shader_param/angle = 213.862

[node name="Nutrient" type="Area2D"]
scale = Vector2( 3.8, 3.8 )
script = ExtResource( 2 )

[node name="CollisionShape2D" type="CollisionShape2D" parent="."]
scale = Vector2( 0.726317, 0.726317 )
shape = SubResource( 1 )

[node name="CPUParticles2D2" type="CPUParticles2D" parent="."]
visible = false
material = SubResource( 4 )
rotation = 0.143117
scale = Vector2( 1.412, 1.412 )
amount = 6
speed_scale = 0.5
explosiveness = 0.18
randomness = 1.0
fixed_fps = 24
texture = ExtResource( 1 )
direction = Vector2( 0, 0 )
spread = 180.0
gravity = Vector2( 0, 0 )
scale_amount = 0.6
scale_amount_random = 0.6
color = Color( 1, 1, 1, 0.784314 )
color_ramp = SubResource( 2 )

[node name="CPUParticles2D" type="CPUParticles2D" parent="."]
material = SubResource( 6 )
scale = Vector2( 0.193472, 0.193472 )
amount = 20
lifetime = 5.0
preprocess = 100.0
randomness = 1.0
lifetime_randomness = 0.46
texture = ExtResource( 3 )
direction = Vector2( 1, 1 )
spread = 180.0
gravity = Vector2( 0, 0 )
initial_velocity = 30.0
initial_velocity_random = 1.0
damping = 65.6
angle = 720.0
angle_random = 1.0
scale_amount = 2.0
scale_amount_random = 0.04
color = Color( 1, 1, 1, 0.784314 )
hue_variation = 0.01
hue_variation_random = 0.1
